#!/usr/bin/env bash
## File: /usr/local/bin/network-mapping/modules/reports-shared.shell

#------------------------------------------------------------------------------#

set -euo pipefail;
## set -x;

export LC_ALL=C;

export TMP_DIR="$( mktemp -d )";
trap '[[ -d "${TMP_DIR}" ]] && rm -rf "${TMP_DIR}"' EXIT;

#------------------------------------------------------------------------------#
# Locate the latest reports folder
#------------------------------------------------------------------------------#

[[ -n ${1:-} ]] && base_folder="${1}" || {
  echo -e "ERROR: Missing base capture folder path";
  exit 1;
};

shared_folder="${base_folder}/shared";
exports_folder="exports/${base_folder}";

mkdir -p "${exports_folder}";

echo -e "Using shared folder: ${shared_folder}";
echo -e "Exporting CSV files to: ${exports_folder}";
echo -e;

#------------------------------------------------------------------------------#
# Report Aggregator: Transit Gateway Advertised Routes
#------------------------------------------------------------------------------
# Processes each advertised routes JSON file in:
#   <shared_folder>/advertised/tgw*.json
#
# Extracts for each advertised route:
# - DestinationCidrBlock:               CIDR block of the advertised route
# - State:                              Route state (available, blackhole)
# - Type:                               Type of route (static, propagated)
# - TransitGatewayRouteTableAnnouncementId: ID of the route table announcement
# - AdditionalRoutesAvailable:          Whether additional routes are available
# - TransitGatewayAttachmentId:         TGW Attachment ID
# - ResourceId:                         ID of the attached resource
# - ResourceType:                       Type of the resource (vpc, vpn, etc.)
# - Tags:                               List of tags in "Key=Value" format, separated by newlines
#
# Output CSV:
# - Filename: tgw_advertised_routes.csv
# - Location: ${exports_folder}
#------------------------------------------------------------------------------#

function report_tgw_advertised_routes () {

    local output_file="${exports_folder}/tgw_advertised_routes.csv";
    : > "${output_file}";

    local headers=(
      DestinationCidrBlock
      State
      Type
      TransitGatewayRouteTableAnnouncementId
      AdditionalRoutesAvailable
      TransitGatewayAttachmentId
      ResourceId
      ResourceType
      Tags
    ); IFS=','; echo "${headers[*]}" > "${output_file}";

    for target_file in "${shared_folder}/advertised"/tgw*.json; do
      if [[ ! -f "${target_file}" ]]; then
              # echo -e "Skipping: ${target_file} not found";
              continue;
        else  echo -e "\nProcessing: ${target_file}";
      fi;

      jq -r '
        (.Routes // [])[] as $route
        | ($route.TransitGatewayAttachments // [{}])[] as $attach
        | [
          ($route.DestinationCidrBlock // "-"),
          ($route.State // "-"),
          ($route.Type // "-"),
          ($route.TransitGatewayRouteTableAnnouncementId // "-"),
          ($route.AdditionalRoutesAvailable | tostring // "-"),
          ($attach.TransitGatewayAttachmentId // "-"),
          ($attach.ResourceId // "-"),
          ($attach.ResourceType // "-"),
          (
            ( $route.Tags // [] )
            | map( "\(.Key)=\(.Value)" )
            | join( "\n" )
          )
        ] | @csv
      ' "${target_file}" | tee -a "${output_file}";
    done;

    return 0;
}; alias report-tgw-advertised-routes='report_tgw_advertised_routes';

#------------------------------------------------------------------------------#
# Report Aggregator: Transit Gateway Associated Routes
#------------------------------------------------------------------------------
# Processes each associated routes JSON file in:
#   <shared_folder>/associated/tgw*.json
#
# Extracts for each association:
# - TransitGatewayAttachmentId
# - ResourceId
# - ResourceType
# - State
#
# Output CSV:
# - Filename: tgw_associated_routes.csv
# - Location: ${exports_folder}
#------------------------------------------------------------------------------#

function report_tgw_associated_routes () {

    local output_file="${exports_folder}/tgw_associated_routes.csv";
    : > "${output_file}";

    local headers=(
      TransitGatewayAttachmentId
      ResourceId
      ResourceType
      State
    ); IFS=','; echo "${headers[*]}" > "${output_file}";

    for target_file in "${shared_folder}/associated"/tgw*.json; do
      if [[ ! -f "${target_file}" ]]; then
              # echo -e "Skipping: ${target_file} not found";
              continue;
        else  echo -e "\nProcessing: ${target_file}";
      fi;

      jq -r '
        (.Associations // [])[] |
        [
          (.TransitGatewayAttachmentId // "-"),
          (.ResourceId // "-"),
          (.ResourceType // "-"),
          (.State // "-")
        ] | @csv
      ' "${target_file}" | tee -a "${output_file}";
    done;

    return 0;
}; alias report-tgw-associated-routes='report_tgw_associated_routes';

#------------------------------------------------------------------------------#
# Report Aggregator: Transit Gateway Propagated Routes
#------------------------------------------------------------------------------
# Processes each propagated routes JSON file in:
#   <shared_folder>/propagated/tgw*.json
#
# Extracts for each propagated attachment:
# - TransitGatewayAttachmentId:  TGW Attachment ID
# - ResourceId:                  ID of the attached resource
# - ResourceType:                Type of the resource (vpc, vpn, etc.)
# - State:                       Propagation state (enabled, disabled)
#
# Output CSV:
# - Filename: tgw_propagated_routes.csv
# - Location: ${exports_folder}
#------------------------------------------------------------------------------#

function report_tgw_propagated_routes () {

    local output_file="${exports_folder}/tgw_propagated_routes.csv";
    : > "${output_file}";

    local headers=(
      TransitGatewayAttachmentId
      ResourceId
      ResourceType
      State
    ); IFS=','; echo "${headers[*]}" > "${output_file}";

    for target_file in "${shared_folder}/propagated"/tgw*.json; do
      if [[ ! -f "${target_file}" ]]; then
              # echo -e "Skipping: ${target_file} not found";
              continue;
        else  echo -e "\nProcessing: ${target_file}";
      fi;

      jq -r '
        (.TransitGatewayRouteTablePropagations // [])[] |
        [
          (.TransitGatewayAttachmentId // "-"),
          (.ResourceId // "-"),
          (.ResourceType // "-"),
          (.State // "-")
        ] | @csv
      ' "${target_file}" | tee -a "${output_file}";
    done;

    return 0;
}; alias report-tgw-propagated-routes='report_tgw_propagated_routes';

#------------------------------------------------------------------------------#
# Report: Caller Identity - CSV Output
# Processes the shared/caller_identity.json file
# Extracts:
# - Account, UserId, Arn
#------------------------------------------------------------------------------#

function report_caller_identity () {

    local output_file="${exports_folder}/caller_identity.csv";
    : > "${output_file}";

    local target_file="${shared_folder}/caller_identity.json";
    if [[ ! -f "${target_file}" ]]; then
            # echo -e "Skipping: ${target_file} not found";
            continue;
      else  echo -e "\nProcessing: ${target_file}";
    fi;

    ## Define the CSV headers as an array
    local headers=(
      Account
      UserId
      Arn
    ); IFS=','; echo -e "${headers[*]}" > "${output_file}";

    jq -r '
      [
        .Account,
        .UserId,
        .Arn
      ] | @csv
    ' "${target_file}" | tee -a "${output_file}";

    return 0;
}; alias report-caller-identity='report_caller_identity';

#------------------------------------------------------------------------------#
# Report Aggregator: Elastic IPs
#------------------------------------------------------------------------------
# Processes the shared elastic IPs JSON file:
#   <shared_folder>/elastic_ips.json
#
# Extracts for each Elastic IP:
# - PublicIp:                     Elastic Public IP address
# - AllocationId:                  Allocation ID for the EIP
# - AssociatedInstance:            Associated EC2 Instance ID
# - AssociatedNetworkInterface:    Associated ENI ID
# - Tags:                          List of tags in "Key=Value" format, separated by newlines
#
# Output CSV:
# - Filename: elastic_ips.csv
# - Location: ${exports_folder}
#------------------------------------------------------------------------------#

function report_elastic_ips () {

    local output_file="${exports_folder}/elastic_ips.csv";
    : > "${output_file}";

    local target_file="${shared_folder}/elastic_ips.json";
    if [[ ! -f "${target_file}" ]]; then
            # echo -e "Skipping: ${target_file} not found";
            continue;
      else  echo -e "\nProcessing: ${target_file}";
    fi;

    local headers=(
      PublicIp
      AllocationId
      AssociatedInstance
      AssociatedNetworkInterface
      Tags
    ); IFS=','; echo "${headers[*]}" > "${output_file}";

    jq -r '
      .[]? |
      [
        (.PublicIp // "-"),
        (.AllocationId // "-"),
        (.AssociatedInstance // "-"),
        (.AssociatedNetworkInterface // "-"),
        (
          ( .Tags // [] )
          | map( "\(.Key)=\(.Value)" )
          | join( "\n" )
        )
      ] | @csv
    ' "${target_file}" | tee -a "${output_file}";

    return 0;
}; alias report-elastic-ips='report_elastic_ips';

#------------------------------------------------------------------------------#
# Report: Managed Instances - CSV Output
# Processes the shared/managed_instances.json file
# Extracts:
# - InstanceId, PingStatus, PlatformType, LastPingDateTime, IPAddress,
#   ComputerName, AgentVersion, IsLatestVersion, ResourceType, AssociationStatus,
#   LastAssociationExecutionDate, LastSuccessfulAssociationExecutionDate, SourceId, SourceType,
#   AssociationOverview.DetailedStatus, and nested association counts.
#------------------------------------------------------------------------------#

function report_managed_instances () {

    local output_file="${exports_folder}/managed_instances.csv";
    : > "${output_file}";

    local target_file="${shared_folder}/managed_instances.json";
    if [[ ! -f "${target_file}" ]]; then
            # echo -e "Skipping: ${target_file} not found";
            continue;
      else  echo -e "\nProcessing: ${target_file}";
    fi;

    ## Define the CSV headers as an array
    local headers=(
      InstanceId
      PingStatus
      PlatformType
      LastPingDateTime
      IPAddress
      ComputerName
      AgentVersion
      IsLatestVersion
      ResourceType
      AssociationStatus
      LastAssociationExecutionDate
      LastSuccessfulAssociationExecutionDate
      SourceId
      SourceType
      AssociationOverview.DetailedStatus
      AssociationOverview.InstanceAssociationStatusAggregatedCount.Failed
      AssociationOverview.InstanceAssociationStatusAggregatedCount.Success
    ); IFS=','; echo -e "${headers[*]}" > "${output_file}";

    jq -r '
      .InstanceInformationList[]? |
      [
        (.InstanceId // "-"),
        (.PingStatus // "-"),
        (.PlatformType // "-"),
        (.LastPingDateTime // "-"),
        (.IPAddress // "-"),
        (.ComputerName // "-"),
        (.AgentVersion // "-"),
        (.IsLatestVersion | tostring // "-"),
        (.ResourceType // "-"),
        (.AssociationStatus // "-"),
        (.LastAssociationExecutionDate // "-"),
        (.LastSuccessfulAssociationExecutionDate // "-"),
        (.SourceId // "-"),
        (.SourceType // "-"),
        (.AssociationOverview.DetailedStatus // "-"),
        (.AssociationOverview.InstanceAssociationStatusAggregatedCount.Failed // "0"),
        (.AssociationOverview.InstanceAssociationStatusAggregatedCount.Success // "0")
      ] | @csv
    ' "${target_file}" | tee -a "${output_file}";

    return 0;
}; alias report-managed-instances='report_managed_instances';

#------------------------------------------------------------------------------#
# Report Aggregator: Prefix Lists
#------------------------------------------------------------------------------
# Processes the shared prefix_lists.json file:
#   <shared_folder>/prefix_lists.json
#
# Extracts for each Prefix List:
# - PrefixListId:   Prefix List ID
# - PrefixListName: Prefix List name
# - AddressFamily:  IPv4 or IPv6
# - State:          State of the Prefix List
# - PrefixListArn:  Full ARN of the Prefix List
# - OwnerId:        AWS Account Owner ID
# - Tags:           List of tags in "Key=Value" format, separated by newlines
#
# Output CSV:
# - Filename: prefix_lists.csv
# - Location: ${exports_folder}
#------------------------------------------------------------------------------#

function report_prefix_lists () {

    local output_file="${exports_folder}/prefix_lists.csv";
    : > "${output_file}";

    local target_file="${shared_folder}/prefix_lists.json";
    if [[ ! -f "${target_file}" ]]; then
            # echo -e "Skipping: ${target_file} not found";
            continue;
      else  echo -e "\nProcessing: ${target_file}";
    fi;

    local headers=(
      PrefixListId
      PrefixListName
      AddressFamily
      State
      PrefixListArn
      OwnerId
      Tags
    ); IFS=','; echo "${headers[*]}" > "${output_file}";

    jq -r '
      .PrefixLists[]? |
      [
        (.PrefixListId // "-"),
        (.PrefixListName // "-"),
        (.AddressFamily // "-"),
        (.State // "-"),
        (.PrefixListArn // "-"),
        (.OwnerId // "-"),
        (
          ( .Tags // [] )
          | map( "\(.Key)=\(.Value)" )
          | join( "\n" )
        )
      ] | @csv
    ' "${target_file}" | tee -a "${output_file}";

    return 0;
}; alias report-prefix-lists='report_prefix_lists';

#------------------------------------------------------------------------------#
# Report Aggregator: Transit Gateway Route Tables
#------------------------------------------------------------------------------
# Processes the shared tgw_route_tables.json file:
#   <shared_folder>/tgw_route_tables.json
#
# Extracts for each TGW Route Table:
# - TransitGatewayRouteTableId:   TGW Route Table ID
# - TransitGatewayId:             TGW ID
# - State:                        State of the route table (available, deleted)
# - DefaultAssociationRouteTable: Whether it is the default association route table
# - DefaultPropagationRouteTable: Whether it is the default propagation route table
# - CreationTime:                 Creation timestamp
# - Tags:                         List of tags in "Key=Value" format, separated by newlines
#
# Output CSV:
# - Filename: tgw_route_tables.csv
# - Location: ${exports_folder}
#------------------------------------------------------------------------------#

function report_tgw_route_tables () {

    local output_file="${exports_folder}/tgw_route_tables.csv";
    : > "${output_file}";

    local target_file="${shared_folder}/tgw_route_tables.json";
    if [[ ! -f "${target_file}" ]]; then
            # echo -e "Skipping: ${target_file} not found";
            continue;
      else  echo -e "\nProcessing: ${target_file}";
    fi;

    local headers=(
      TransitGatewayRouteTableId
      TransitGatewayId
      State
      DefaultAssociationRouteTable
      DefaultPropagationRouteTable
      CreationTime
      Tags
    ); IFS=','; echo "${headers[*]}" > "${output_file}";

    jq -r '
      .[]? |
      [
        (.TransitGatewayRouteTableId // "-"),
        (.TransitGatewayId // "-"),
        (.State // "-"),
        (.DefaultAssociationRouteTable | tostring // "-"),
        (.DefaultPropagationRouteTable | tostring // "-"),
        (.CreationTime // "-"),
        (
          ( .Tags // [] )
          | map( "\(.Key)=\(.Value)" )
          | join( "\n" )
        )
      ] | @csv
    ' "${target_file}" | tee -a "${output_file}";

    return 0;
}; alias report-tgw-route-tables='report_tgw_route_tables';

#------------------------------------------------------------------------------#
# Report Aggregator: Transit Gateways
#------------------------------------------------------------------------------
# Processes the shared transit_gateways.json file:
#   <shared_folder>/transit_gateways.json
#
# Extracts for each Transit Gateway:
# - TransitGatewayId:                    Transit Gateway ID
# - TransitGatewayArn:                   Full ARN
# - State:                               State of the Transit Gateway
# - OwnerId:                             AWS Account Owner ID
# - Description:                         Transit Gateway description
# - CreationTime:                        Creation timestamp
# - Options.AmazonSideAsn:               ASN number assigned by AWS
# - Options.AutoAcceptSharedAttachments: Auto-accept attachments setting
# - Options.DefaultRouteTableAssociation: Default association setting
# - Options.AssociationDefaultRouteTableId: Default association RT ID
# - Options.DefaultRouteTablePropagation: Default propagation setting
# - Options.PropagationDefaultRouteTableId: Default propagation RT ID
# - Options.VpnEcmpSupport:              VPN ECMP support
# - Options.DnsSupport:                  DNS support setting
# - Options.SecurityGroupReferencingSupport: SG referencing support
# - Options.MulticastSupport:            Multicast support
# - Tags:                                List of tags in "Key=Value" format, separated by newlines
#
# Output CSV:
# - Filename: transit_gateways.csv
# - Location: ${exports_folder}
#------------------------------------------------------------------------------#

function report_transit_gateways () {

    local output_file="${exports_folder}/transit_gateways.csv";
    : > "${output_file}";

    local target_file="${shared_folder}/transit_gateways.json";
    if [[ ! -f "${target_file}" ]]; then
            # echo -e "Skipping: ${target_file} not found";
            continue;
      else  echo -e "\nProcessing: ${target_file}";
    fi;

    local headers=(
      TransitGatewayId
      TransitGatewayArn
      State
      OwnerId
      Description
      CreationTime
      AmazonSideAsn
      AutoAcceptSharedAttachments
      DefaultRouteTableAssociation
      AssociationDefaultRouteTableId
      DefaultRouteTablePropagation
      PropagationDefaultRouteTableId
      VpnEcmpSupport
      DnsSupport
      SecurityGroupReferencingSupport
      MulticastSupport
      Tags
    ); IFS=','; echo "${headers[*]}" > "${output_file}";

    jq -r '
      .TransitGateways[]? |
      [
        (.TransitGatewayId // "-"),
        (.TransitGatewayArn // "-"),
        (.State // "-"),
        (.OwnerId // "-"),
        (.Description // "-"),
        (.CreationTime // "-"),
        (.Options.AmazonSideAsn | tostring // "-"),
        (.Options.AutoAcceptSharedAttachments // "-"),
        (.Options.DefaultRouteTableAssociation // "-"),
        (.Options.AssociationDefaultRouteTableId // "-"),
        (.Options.DefaultRouteTablePropagation // "-"),
        (.Options.PropagationDefaultRouteTableId // "-"),
        (.Options.VpnEcmpSupport // "-"),
        (.Options.DnsSupport // "-"),
        (.Options.SecurityGroupReferencingSupport // "-"),
        (.Options.MulticastSupport // "-"),
        (
          ( .Tags // [] )
          | map( "\(.Key)=\(.Value)" )
          | join( "\n" )
        )
      ] | @csv
    ' "${target_file}" | tee -a "${output_file}";

    return 0;
}; alias report-transit-gateways='report_transit_gateways';

#------------------------------------------------------------------------------#
# Report Aggregator: VPC Peering Connections
#------------------------------------------------------------------------------
# Processes the shared vpc_peering.json file:
#   <shared_folder>/vpc_peering.json
#
# Extracts for each VPC Peering Connection:
# - VpcPeeringConnectionId:                           Peering connection ID
# - StatusCode:                                       Status code (active, pending, etc.)
# - AccepterVpcId, AccepterOwnerId, AccepterRegion:   Accepter VPC details
# - AccepterCidrBlock:                                CIDR block of the accepter VPC
# - RequesterVpcId, RequesterOwnerId, RequesterRegion: Requester VPC details
# - RequesterCidrBlock:                               CIDR block of the requester VPC
# - AllowDnsResolutionFromRemoteVpc:                  Peering options
# - AllowEgressFromLocalClassicLinkToRemoteVpc:
# - AllowEgressFromLocalVpcToRemoteClassicLink:
# - Tags:                                             List of tags in "Key=Value" format, separated by semicolons
#
# Output CSV:
# - Filename: vpc_peering.csv
# - Location: ${exports_folder}
#------------------------------------------------------------------------------#

function report_vpc_peering () {

    local output_file="${exports_folder}/vpc_peering.csv";
    : > "${output_file}";

    local target_file="${shared_folder}/vpc_peering.json";
    if [[ ! -f "${target_file}" ]]; then
            # echo -e "Skipping: ${target_file} not found";
            continue;
      else  echo -e "\nProcessing: ${target_file}";
    fi;

    local headers=(
      VpcPeeringConnectionId
      StatusCode
      AccepterVpcId
      AccepterOwnerId
      AccepterRegion
      AccepterCidrBlock
      RequesterVpcId
      RequesterOwnerId
      RequesterRegion
      RequesterCidrBlock
      AllowDnsResolutionFromRemoteVpc
      AllowEgressFromLocalClassicLinkToRemoteVpc
      AllowEgressFromLocalVpcToRemoteClassicLink
      Tags
    ); IFS=','; echo "${headers[*]}" > "${output_file}";

    jq -r '
      .VpcPeeringConnections[]? |
      [
        (.VpcPeeringConnectionId // "-"),
        (.Status.Code // "-"),
        (.AccepterVpcInfo.VpcId // "-"),
        (.AccepterVpcInfo.OwnerId // "-"),
        (.AccepterVpcInfo.Region // "-"),
        (.AccepterVpcInfo.CidrBlock // "-"),
        (.RequesterVpcInfo.VpcId // "-"),
        (.RequesterVpcInfo.OwnerId // "-"),
        (.RequesterVpcInfo.Region // "-"),
        (.RequesterVpcInfo.CidrBlock // "-"),
        (.RequesterVpcInfo.PeeringOptions.AllowDnsResolutionFromRemoteVpc | tostring // "-"),
        (.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalClassicLinkToRemoteVpc | tostring // "-"),
        (.RequesterVpcInfo.PeeringOptions.AllowEgressFromLocalVpcToRemoteClassicLink | tostring // "-"),
        (
          ( .Tags // [] )
          | map( "\(.Key)=\(.Value)" )
          | join( "\n" )
        )
      ] | @csv
    ' "${target_file}" | tee -a "${output_file}";

    return 0;
}; alias report-vpc-peering='report_vpc_peering';

#------------------------------------------------------------------------------#

report_caller_identity; echo -e;
report_elastic_ips; echo -e;
report_managed_instances; echo -e;
report_prefix_lists; echo -e;
report_tgw_advertised_routes; echo -e;
report_tgw_associated_routes; echo -e;
report_tgw_propagated_routes; echo -e;
report_tgw_route_tables; echo -e;
report_transit_gateways; echo -e;
report_vpc_peering; echo -e;
